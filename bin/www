#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const http = require('http');
const logger = require('../service/logger');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Get host ip
 */
function getIPAddress() {
  var interfaces = require('os').networkInterfaces();
  for (var devName in interfaces) {
    var iface = interfaces[devName];
    for (var i = 0; i < iface.length; i++) {
      var alias = iface[i];
      if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
        return alias.address;
      }
    }
  }
}

const localIP = getIPAddress()

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
// 超时2min
server.setTimeout(Number(process.env.TIMEOUT || 120000));
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, localIP);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let bind;
  const addr = server.address();
  if (addr.address == '::') {
    bind = 'http://localhost:' + addr.port;
  } else {
    bind = 'http://' + addr.address + ":" + addr.port;
  }
  logger.info('Listening on ' + bind);
}
